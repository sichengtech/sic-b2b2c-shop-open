<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.sicheng.admin.sys.dao.SysVariableDao">
	<cache type="com.sicheng.common.persistence.cache.DelegateCache">
		<property name="expire" value="172800"/><!-- 缓存有效期，单位：秒，默认值2天 -->
	</cache>
	<!-- 全部字段 -->
	<sql id="sysVariableColumns">
	<trim suffixOverrides=",">
		a.var_id AS "varId",                                                 <!-- 主键 number(19)-->
		a.name AS "name",                                                    <!-- 变量名有唯一约束不可重名，就像map的key一样。用于通过name获取value nvarchar2(64)-->
		a.value AS "value",                                                  <!-- 变量值 nvarchar2(1024)-->
		a.value_clob AS "valueClob",                                         <!-- 变量值，用于存储clob类型值 clob-->
		a.bewrite AS "bewrite",                                              <!-- 描述，说明这个变量有什么作用 nvarchar2(255)-->
		a.create_by AS "createBy.id",                                        <!-- 创建者 varchar2(64)-->
		a.create_date AS "createDate",                                       <!-- 创建时间 date(7)-->
		a.update_by AS "updateBy.id",                                        <!-- 更新者 varchar2(64)-->
		a.update_date AS "updateDate",                                       <!-- 更新时间 date(7)-->

	</trim>
	</sql>

	<!-- 关联表 -->
	<sql id="sysVariableJoins">
	</sql>

	<!-- 复用的sql片段，where条件部分，使用者：deleteByWhere、countByWhere、selectByWhere、updateByWhere、updateByWhereSelective -->
	<sql id="Where_Clause">
	<if test="w!=null and w.e!=null">
		<bind name="c" value="w.e"/>
		<if test="c.varId != null ">AND a.var_id = #{c.varId}</if>
		<if test="c.name != null and c.name != ''">AND a.name =  #{c.name}</if>
		<if test="c.value != null and c.value != ''">AND a.value = #{c.value}</if>
		<if test="c.valueClob != null and c.valueClob != ''">AND a.value_clob = #{c.valueClob}</if>
		<if test="c.bewrite != null and c.bewrite != ''">AND a.bewrite = #{c.bewrite}</if>
		<if test="c.createBy != null and c.createBy.id != null ">AND a.create_by = #{c.createBy.id}</if>
		<if test="c.beginCreateDate != null and c.endCreateDate != null ">AND a.create_date BETWEEN #{c.beginCreateDate} AND #{c.endCreateDate}</if>
		<if test="c.updateBy != null and c.updateBy.id != null ">AND a.update_by = #{c.updateBy.id}</if>
		<if test="c.beginUpdateDate != null and c.endUpdateDate != null ">AND a.update_date BETWEEN #{c.beginUpdateDate} AND #{c.endUpdateDate}</if>
	</if>
	</sql>	

	<!--根据主键查询记录-->
	<select id="selectById" resultType="SysVariable">
		SELECT 
		<include refid="sysVariableColumns"/>
		FROM sys_variable a
		<include refid="sysVariableJoins"/>
		WHERE a.var_id = #{id}
	</select>

	<!-- 根据多个id查询出一个列表 -->
	<select id="selectByIdIn" resultType="SysVariable">
		SELECT 
		<include refid="sysVariableColumns"/>
		FROM sys_variable a
		<where>
			<choose>
				<when test="list != null and list.size >0">
					a.var_id in
					<foreach close=")" collection="list" item="item" open="(" separator=",">
						#{item}
					</foreach>
				</when>
				<otherwise> 1=2 </otherwise>
			</choose>
		</where>
	</select>

	<!--根据条件查询记录集-->
	<select id="selectByWhere" resultType="SysVariable">
		SELECT <if test="w!=null and w.distinct">DISTINCT</if>
		<include refid="sysVariableColumns"/>
		FROM sys_variable a
		<include refid="sysVariableJoins"/>
		<where>
			<if test="w!=null">
			<include refid="Where_Clause" />
			${w.outputSqlWhere}
			</if>
		</where>
		<choose>
			<when test="w!=null and w.outputSqlOrderBy !=null">
				${w.outputSqlOrderBy}
			</when>
			<when test="p!=null and p.orderBy != null">
				ORDER BY ${p.orderBy}
			</when>
			<otherwise>
				ORDER BY a.var_id DESC
			</otherwise>
		</choose>
	</select>

	<!--查询所有记录集，无条件-->
	<select id="selectAll" resultType="SysVariable">
		SELECT <if test="w!=null and w.distinct">DISTINCT</if>
		<include refid="sysVariableColumns"/>
		FROM sys_variable a
		<include refid="sysVariableJoins"/>
		<choose>
			<when test="w!=null and w.outputSqlOrderBy !=null">
				${w.outputSqlOrderBy}
			</when>
			<otherwise>
				ORDER BY a.var_id DESC
			</otherwise>
		</choose>
	</select>
	
	<!--插入。并返回自增长的主键值，mysql、oracle都可以-->
	<insert id="insert" keyProperty="entity.varId" keyColumn="var_id" useGeneratedKeys="true">
		INSERT INTO sys_variable
		<trim prefix="(" suffix=")" suffixOverrides=",">
			var_id,                                            <!-- 主键 number(19)-->
			name,                                              <!-- 变量名有唯一约束不可重名，就像map的key一样。用于通过name获取value nvarchar2(64)-->
			value,                                             <!-- 变量值 nvarchar2(1024)-->
			value_clob,                                        <!-- 变量值，用于存储clob类型值 clob-->
			bewrite,                                           <!-- 描述，说明这个变量有什么作用 nvarchar2(255)-->
			create_by,                                         <!-- 创建者 varchar2(64)-->
			create_date,                                       <!-- 创建时间 date(7)-->
			update_by,                                         <!-- 更新者 varchar2(64)-->
			update_date,                                       <!-- 更新时间 date(7)-->

		</trim>
		 VALUES 
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="entity.pkMode==1">#{entity.varId},</if>
			<if test="entity.pkMode==2">
				<if test="entity.dbType$ == 'oracle'">sys_variable_seq.nextval,</if>
				<if test="entity.dbType$ == 'mssql'">null,</if>
				<if test="entity.dbType$ == 'mysql'">null,</if>
			</if>
			#{entity.name},                                    <!-- 变量名有唯一约束不可重名，就像map的key一样。用于通过name获取value nvarchar2(64)-->
			#{entity.value},                                   <!-- 变量值 nvarchar2(1024)-->
			#{entity.valueClob},                               <!-- 变量值，用于存储clob类型值 clob-->
			#{entity.bewrite},                                 <!-- 描述，说明这个变量有什么作用 nvarchar2(255)-->
			#{entity.createBy.id},                             <!-- 创建者 varchar2(64)-->
			#{entity.createDate},                              <!-- 创建时间 date(7)-->
			#{entity.updateBy.id},                             <!-- 更新者 varchar2(64)-->
			#{entity.updateDate},                              <!-- 更新时间 date(7)-->

	</trim>
	</insert>

	<!--插入,只把非空的值插入到对应的字段。并返回自增长的主键值，mysql、oracle都可以-->
	<insert id="insertSelective" keyProperty="entity.varId" keyColumn="var_id" useGeneratedKeys="true">
		INSERT INTO sys_variable
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="entity.pkMode==1"><if test="entity.varId != null">var_id,</if></if>
			<if test="entity.pkMode==2">var_id,</if>
			<if test="entity.name != null">name,</if>                                          <!-- 变量名有唯一约束不可重名，就像map的key一样。用于通过name获取value nvarchar2(64)-->
			<if test="entity.value != null">value,</if>                                        <!-- 变量值 nvarchar2(1024)-->
			<if test="entity.valueClob != null">value_clob,</if>                               <!-- 变量值，用于存储clob类型值 clob-->
			<if test="entity.bewrite != null">bewrite,</if>                                    <!-- 描述，说明这个变量有什么作用 nvarchar2(255)-->
			<if test="entity.createBy!= null and entity.createBy.id!= null ">create_by,</if>                              <!-- 创建者 varchar2(64)-->
			<if test="entity.createDate != null">create_date,</if>                             <!-- 创建时间 date(7)-->
			<if test="entity.updateBy!= null and entity.updateBy.id!= null ">update_by,</if>                              <!-- 更新者 varchar2(64)-->
			<if test="entity.updateDate != null">update_date,</if>                             <!-- 更新时间 date(7)-->
		</trim>
		 VALUES 
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="entity.pkMode==1">
				<if test="entity.varId != null">#{entity.varId},</if>
			</if>
			<if test="entity.pkMode==2">
				<if test="entity.dbType$ == 'oracle'">sys_variable_seq.nextval,</if>
				<if test="entity.dbType$ == 'mssql'">null,</if>
				<if test="entity.dbType$ == 'mysql'">null,</if>
			</if>
			<if test="entity.name != null">#{entity.name},</if>                                          <!-- 变量名有唯一约束不可重名，就像map的key一样。用于通过name获取value nvarchar2(64)-->
			<if test="entity.value != null">#{entity.value},</if>                                        <!-- 变量值 nvarchar2(1024)-->
			<if test="entity.valueClob != null">#{entity.valueClob},</if>                                <!-- 变量值，用于存储clob类型值 clob-->
			<if test="entity.bewrite != null">#{entity.bewrite},</if>                                    <!-- 描述，说明这个变量有什么作用 nvarchar2(255)-->
			<if test="entity.createBy!= null and entity.createBy.id!= null ">#{entity.createBy.id},</if>                            <!-- 创建者 varchar2(64)-->
			<if test="entity.createDate != null">#{entity.createDate},</if>                              <!-- 创建时间 date(7)-->
			<if test="entity.updateBy!= null and entity.updateBy.id!= null ">#{entity.updateBy.id},</if>                            <!-- 更新者 varchar2(64)-->
			<if test="entity.updateDate != null">#{entity.updateDate},</if>                              <!-- 更新时间 date(7)-->
		</trim>
	</insert>

	<!-- 根据主键更新记录-->
	<update id="updateById">
		UPDATE sys_variable 
		<set>
			name = #{entity.name},                                          <!-- 变量名有唯一约束不可重名，就像map的key一样。用于通过name获取value nvarchar2(64)-->
			value = #{entity.value},                                        <!-- 变量值 nvarchar2(1024)-->
			value_clob = #{entity.valueClob},                               <!-- 变量值，用于存储clob类型值 clob-->
			bewrite = #{entity.bewrite},                                    <!-- 描述，说明这个变量有什么作用 nvarchar2(255)-->
			create_by = #{entity.createBy.id},                              <!-- 创建者 varchar2(64)-->
			create_date = #{entity.createDate},                             <!-- 创建时间 date(7)-->
			update_by = #{entity.updateBy.id},                              <!-- 更新者 varchar2(64)-->
			update_date = #{entity.updateDate},                             <!-- 更新时间 date(7)-->

		</set>
		WHERE var_id = #{entity.varId}
	</update>

	<!-- 根据条件更新记录-->
	<update id="updateByWhere">
		UPDATE sys_variable a 
		<set>
			name = #{entity.name},                                          <!-- 变量名有唯一约束不可重名，就像map的key一样。用于通过name获取value nvarchar2(64)-->
			value = #{entity.value},                                        <!-- 变量值 nvarchar2(1024)-->
			value_clob = #{entity.valueClob},                               <!-- 变量值，用于存储clob类型值 clob-->
			bewrite = #{entity.bewrite},                                    <!-- 描述，说明这个变量有什么作用 nvarchar2(255)-->
			create_by = #{entity.createBy.id},                              <!-- 创建者 varchar2(64)-->
			create_date = #{entity.createDate},                             <!-- 创建时间 date(7)-->
			update_by = #{entity.updateBy.id},                              <!-- 更新者 varchar2(64)-->
			update_date = #{entity.updateDate},                             <!-- 更新时间 date(7)-->

		</set>
		where  <!-- 防止无where条件时，删除全表、更新全表 -->
		<trim prefixOverrides="AND |OR ">
			<if test="w!=null">
			<include refid="Where_Clause" />
			${w.outputSqlWhere}
			</if>
		</trim>
	</update>

	<!-- 根据主键更新记录,只把非空的值更到对应的字段-->
	<update id="updateByIdSelective">
		UPDATE sys_variable
		<set>
			<if test="entity.name != null">name = #{entity.name},</if>                                                          <!-- 变量名有唯一约束不可重名，就像map的key一样。用于通过name获取value nvarchar2(64)-->
			<if test="entity.value != null">value = #{entity.value},</if>                                                       <!-- 变量值 nvarchar2(1024)-->
			<if test="entity.valueClob != null">value_clob = #{entity.valueClob},</if>                                          <!-- 变量值，用于存储clob类型值 clob-->
			<if test="entity.bewrite != null">bewrite = #{entity.bewrite},</if>                                                 <!-- 描述，说明这个变量有什么作用 nvarchar2(255)-->
			<if test="entity.createBy!= null and entity.createBy.id!= null ">create_by = #{entity.createBy.id},</if>                                       <!-- 创建者 varchar2(64)-->
			<if test="entity.createDate != null">create_date = #{entity.createDate},</if>                                       <!-- 创建时间 date(7)-->
			<if test="entity.updateBy!= null and entity.updateBy.id!= null ">update_by = #{entity.updateBy.id},</if>                                       <!-- 更新者 varchar2(64)-->
			<if test="entity.updateDate != null">update_date = #{entity.updateDate},</if>                                       <!-- 更新时间 date(7)-->
		</set>
		WHERE var_id = #{entity.varId}
	</update>

	<!-- 根据条件更新记录,只把非空的值更到对应的字段-->
	<update id="updateByWhereSelective">
		UPDATE sys_variable a
		<set>
			<if test="entity.name != null">name = #{entity.name},</if>                                                          <!-- 变量名有唯一约束不可重名，就像map的key一样。用于通过name获取value nvarchar2(64)-->
			<if test="entity.value != null">value = #{entity.value},</if>                                                       <!-- 变量值 nvarchar2(1024)-->
			<if test="entity.valueClob != null">value_clob = #{entity.valueClob},</if>                                          <!-- 变量值，用于存储clob类型值 clob-->
			<if test="entity.bewrite != null">bewrite = #{entity.bewrite},</if>                                                 <!-- 描述，说明这个变量有什么作用 nvarchar2(255)-->
			<if test="entity.createBy!= null and entity.createBy.id!= null ">create_by = #{entity.createBy.id},</if>                                       <!-- 创建者 varchar2(64)-->
			<if test="entity.createDate != null">create_date = #{entity.createDate},</if>                                       <!-- 创建时间 date(7)-->
			<if test="entity.updateBy!= null and entity.updateBy.id!= null ">update_by = #{entity.updateBy.id},</if>                                       <!-- 更新者 varchar2(64)-->
			<if test="entity.updateDate != null">update_date = #{entity.updateDate},</if>                                       <!-- 更新时间 date(7)-->
		</set>
		where  <!-- 防止无where条件时，删除全表、更新全表 -->
		<trim prefixOverrides="AND |OR ">
			<if test="w!=null">
			<include refid="Where_Clause" />
			${w.outputSqlWhere}
			</if>
		</trim>
	</update>

	<!-- 根据主键删除记录 -->
	<update id="deleteById">
		DELETE FROM sys_variable
		WHERE var_id = #{id}
	</update>

	<!-- 根据多个id删除记录 -->
	<update id="deleteByIdIn">
		DELETE FROM sys_variable
		<where>
			<choose>
				<when test="list != null and list.size >0">
					var_id in
					<foreach close=")" collection="list" item="item" open="(" separator=",">
						#{item}
					</foreach>
				</when>
				<otherwise> 1=2 </otherwise>
			</choose>
		</where>
	</update>
	
	<!-- 根据条件删除记录 -->
	<update id="deleteByWhere">
		DELETE <if test="w!=null and w.mysql">a </if>FROM sys_variable a
		where  <!-- 防止无where条件时，删除全表、更新全表 -->
		<trim prefixOverrides="AND |OR ">
			<if test="w!=null">
			<include refid="Where_Clause" />
			${w.outputSqlWhere}
			</if>
		</trim>
	</update>

	<!-- 根据条件查询记录总数 -->
	<select id="countByWhere" resultType="java.lang.Integer">
		SELECT <if test="w!=null and w.distinct">DISTINCT</if> COUNT(*) FROM sys_variable a
		<where>
			<if test="w!=null">
			<include refid="Where_Clause" />
			${w.outputSqlWhere}
			</if>
		</where>
	</select>

</mapper>