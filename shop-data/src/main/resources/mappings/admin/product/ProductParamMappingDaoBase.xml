<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.sicheng.admin.product.dao.ProductParamMappingDao">
	<cache type="com.sicheng.common.persistence.cache.DelegateCache">
		<property name="expire" value="172800"/><!-- 缓存有效期，单位：秒，默认值2天 -->
	</cache>
	<!-- 全部字段 -->
	<sql id="productParamMappingColumns">
	<trim suffixOverrides=",">
		a.id AS "id",                                                        <!-- 主键id bigint(20)-->
		a.p_id AS "pId",                                                     <!-- 商品id bigint(20)-->
		a.sort AS "sort",                                                    <!-- 排序 int(11)-->
		a.type AS "type",                                                    <!-- 1核心参数、2辅助参数、3自定义参数。核心参数做为筛选条件 char(1)-->
		a.format AS "format",                                                <!-- 1图片、2文字、3文字+图片（颜色要配图片） char(1)-->
		a.param_id AS "paramId",                                             <!-- 参数ID bigint(20)-->
		a.name AS "name",                                                    <!-- 参数名。做冗余，参数表中的参数被删除后也不影响商品参数的正常显示 varchar(64)-->
		a.value AS "value",                                                  <!-- 参数值。做冗余，参数表中的参数被删除后也不影响商品参数的正常显示 varchar(1024)-->
		a.value_img AS "valueImg",                                           <!-- 参数值的图片。做冗余，参数表中的参数被删除后也不影响商品参数的正常显示 varchar(1024)-->
		a.bak1 AS "bak1",                                                    <!-- 备用字段1 varchar(64)-->
		a.bak2 AS "bak2",                                                    <!-- 备用字段2 varchar(64)-->
		a.bak3 AS "bak3",                                                    <!-- 备用字段3 varchar(64)-->
		a.bak4 AS "bak4",                                                    <!-- 备用字段4 varchar(64)-->
		a.bak5 AS "bak5",                                                    <!-- 备用字段5 varchar(64)-->

	</trim>
	</sql>

	<!-- 关联表 -->
	<sql id="productParamMappingJoins">
	</sql>

	<!-- 复用的sql片段，where条件部分，使用者：deleteByWhere、countByWhere、selectByWhere、updateByWhere、updateByWhereSelective -->
	<sql id="Where_Clause">
	<if test="w!=null and w.e!=null">
		<if test="w.e.id != null ">AND a.id = #{w.e.id}</if>
		<bind name="c" value="w.e"/>
		<if test="c.pId != null ">AND a.p_id = #{c.pId}</if>
		<if test="c.sort != null ">AND a.sort = #{c.sort}</if>
		<if test="c.type != null and c.type != ''">AND a.type = #{c.type}</if>
		<if test="c.format != null and c.format != ''">AND a.format = #{c.format}</if>
		<if test="c.paramId != null ">AND a.param_id = #{c.paramId}</if>
		<if test="c.name != null and c.name != ''">AND a.name = #{c.name}</if>
		<if test="c.value != null and c.value != ''">AND a.value = #{c.value}</if>
		<if test="c.valueImg != null and c.valueImg != ''">AND a.value_img = #{c.valueImg}</if>
		<if test="c.bak1 != null and c.bak1 != ''">AND a.bak1 = #{c.bak1}</if>
		<if test="c.bak2 != null and c.bak2 != ''">AND a.bak2 = #{c.bak2}</if>
		<if test="c.bak3 != null and c.bak3 != ''">AND a.bak3 = #{c.bak3}</if>
		<if test="c.bak4 != null and c.bak4 != ''">AND a.bak4 = #{c.bak4}</if>
		<if test="c.bak5 != null and c.bak5 != ''">AND a.bak5 = #{c.bak5}</if>
	</if>
	</sql>	

	<!--根据主键查询记录-->
	<select id="selectById" resultType="ProductParamMapping">
		SELECT 
		<include refid="productParamMappingColumns"/>
		FROM product_param_mapping a
		<include refid="productParamMappingJoins"/>
		WHERE a.id = #{id}
	</select>

	<!-- 根据多个id查询出一个列表 -->
	<select id="selectByIdIn" resultType="ProductParamMapping">
		SELECT 
		<include refid="productParamMappingColumns"/>
		FROM product_param_mapping a
		<where>
			<choose>
				<when test="list != null and list.size >0">
					a.id in
					<foreach close=")" collection="list" item="item" open="(" separator=",">
						#{item}
					</foreach>
				</when>
				<otherwise> 1=2 </otherwise>
			</choose>
		</where>
	</select>

	<!--根据条件查询记录集-->
	<select id="selectByWhere" resultType="ProductParamMapping">
		SELECT <if test="w!=null and w.distinct">DISTINCT</if>
		<include refid="productParamMappingColumns"/>
		FROM product_param_mapping a
		<include refid="productParamMappingJoins"/>
		<where>
			<if test="w!=null">
			<include refid="Where_Clause" />
			${w.outputSqlWhere}
			</if>
		</where>
		<choose>
			<when test="w!=null and w.outputSqlOrderBy !=null">
				${w.outputSqlOrderBy}
			</when>
			<when test="p!=null and p.orderBy != null">
				ORDER BY ${p.orderBy}
			</when>
			<otherwise>
				ORDER BY a.id DESC
			</otherwise>
		</choose>
	</select>

	<!--查询所有记录集，无条件-->
	<select id="selectAll" resultType="ProductParamMapping">
		SELECT <if test="w!=null and w.distinct">DISTINCT</if>
		<include refid="productParamMappingColumns"/>
		FROM product_param_mapping a
		<include refid="productParamMappingJoins"/>
		<choose>
			<when test="w!=null and w.outputSqlOrderBy !=null">
				${w.outputSqlOrderBy}
			</when>
			<otherwise>
				ORDER BY a.id DESC
			</otherwise>
		</choose>
	</select>
	
	<!--插入。并返回自增长的主键值，mysql、oracle都可以-->
	<insert id="insert" keyProperty="entity.id" keyColumn="id" useGeneratedKeys="true">
		INSERT INTO product_param_mapping
		<trim prefix="(" suffix=")" suffixOverrides=",">
			id,                                                <!-- 主键id bigint(20)-->
			p_id,                                              <!-- 商品id bigint(20)-->
			sort,                                              <!-- 排序 int(11)-->
			type,                                              <!-- 1核心参数、2辅助参数、3自定义参数。核心参数做为筛选条件 char(1)-->
			format,                                            <!-- 1图片、2文字、3文字+图片（颜色要配图片） char(1)-->
			param_id,                                          <!-- 参数ID bigint(20)-->
			name,                                              <!-- 参数名。做冗余，参数表中的参数被删除后也不影响商品参数的正常显示 varchar(64)-->
			value,                                             <!-- 参数值。做冗余，参数表中的参数被删除后也不影响商品参数的正常显示 varchar(1024)-->
			value_img,                                         <!-- 参数值的图片。做冗余，参数表中的参数被删除后也不影响商品参数的正常显示 varchar(1024)-->
			bak1,                                              <!-- 备用字段1 varchar(64)-->
			bak2,                                              <!-- 备用字段2 varchar(64)-->
			bak3,                                              <!-- 备用字段3 varchar(64)-->
			bak4,                                              <!-- 备用字段4 varchar(64)-->
			bak5,                                              <!-- 备用字段5 varchar(64)-->

		</trim>
		 VALUES 
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="entity.pkMode==1">#{entity.id},</if>
			<if test="entity.pkMode==2">
				<if test="entity.dbType$ == 'oracle'">product_param_mapping_seq.nextval,</if>
				<if test="entity.dbType$ == 'mssql'">null,</if>
				<if test="entity.dbType$ == 'mysql'">null,</if>
			</if>
			#{entity.pId},                                     <!-- 商品id bigint(20)-->
			#{entity.sort},                                    <!-- 排序 int(11)-->
			#{entity.type},                                    <!-- 1核心参数、2辅助参数、3自定义参数。核心参数做为筛选条件 char(1)-->
			#{entity.format},                                  <!-- 1图片、2文字、3文字+图片（颜色要配图片） char(1)-->
			#{entity.paramId},                                 <!-- 参数ID bigint(20)-->
			#{entity.name},                                    <!-- 参数名。做冗余，参数表中的参数被删除后也不影响商品参数的正常显示 varchar(64)-->
			#{entity.value},                                   <!-- 参数值。做冗余，参数表中的参数被删除后也不影响商品参数的正常显示 varchar(1024)-->
			#{entity.valueImg},                                <!-- 参数值的图片。做冗余，参数表中的参数被删除后也不影响商品参数的正常显示 varchar(1024)-->
			#{entity.bak1},                                    <!-- 备用字段1 varchar(64)-->
			#{entity.bak2},                                    <!-- 备用字段2 varchar(64)-->
			#{entity.bak3},                                    <!-- 备用字段3 varchar(64)-->
			#{entity.bak4},                                    <!-- 备用字段4 varchar(64)-->
			#{entity.bak5},                                    <!-- 备用字段5 varchar(64)-->

	</trim>
	</insert>

	<!--插入,只把非空的值插入到对应的字段。并返回自增长的主键值，mysql、oracle都可以-->
	<insert id="insertSelective" keyProperty="entity.id" keyColumn="id" useGeneratedKeys="true">
		INSERT INTO product_param_mapping
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="entity.pkMode==1"><if test="entity.id != null">id,</if></if>
			<if test="entity.pkMode==2">id,</if>
			<if test="entity.pId != null">p_id,</if>                                           <!-- 商品id bigint(20)-->
			<if test="entity.sort != null">sort,</if>                                          <!-- 排序 int(11)-->
			<if test="entity.type != null">type,</if>                                          <!-- 1核心参数、2辅助参数、3自定义参数。核心参数做为筛选条件 char(1)-->
			<if test="entity.format != null">format,</if>                                      <!-- 1图片、2文字、3文字+图片（颜色要配图片） char(1)-->
			<if test="entity.paramId != null">param_id,</if>                                   <!-- 参数ID bigint(20)-->
			<if test="entity.name != null">name,</if>                                          <!-- 参数名。做冗余，参数表中的参数被删除后也不影响商品参数的正常显示 varchar(64)-->
			<if test="entity.value != null">value,</if>                                        <!-- 参数值。做冗余，参数表中的参数被删除后也不影响商品参数的正常显示 varchar(1024)-->
			<if test="entity.valueImg != null">value_img,</if>                                 <!-- 参数值的图片。做冗余，参数表中的参数被删除后也不影响商品参数的正常显示 varchar(1024)-->
			<if test="entity.bak1 != null">bak1,</if>                                          <!-- 备用字段1 varchar(64)-->
			<if test="entity.bak2 != null">bak2,</if>                                          <!-- 备用字段2 varchar(64)-->
			<if test="entity.bak3 != null">bak3,</if>                                          <!-- 备用字段3 varchar(64)-->
			<if test="entity.bak4 != null">bak4,</if>                                          <!-- 备用字段4 varchar(64)-->
			<if test="entity.bak5 != null">bak5,</if>                                          <!-- 备用字段5 varchar(64)-->
		</trim>
		 VALUES 
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="entity.pkMode==1">
				<if test="entity.id != null">#{entity.id},</if>
			</if>
			<if test="entity.pkMode==2">
				<if test="entity.dbType$ == 'oracle'">product_param_mapping_seq.nextval,</if>
				<if test="entity.dbType$ == 'mssql'">null,</if>
				<if test="entity.dbType$ == 'mysql'">null,</if>
			</if>
			<if test="entity.pId != null">#{entity.pId},</if>                                            <!-- 商品id bigint(20)-->
			<if test="entity.sort != null">#{entity.sort},</if>                                          <!-- 排序 int(11)-->
			<if test="entity.type != null">#{entity.type},</if>                                          <!-- 1核心参数、2辅助参数、3自定义参数。核心参数做为筛选条件 char(1)-->
			<if test="entity.format != null">#{entity.format},</if>                                      <!-- 1图片、2文字、3文字+图片（颜色要配图片） char(1)-->
			<if test="entity.paramId != null">#{entity.paramId},</if>                                    <!-- 参数ID bigint(20)-->
			<if test="entity.name != null">#{entity.name},</if>                                          <!-- 参数名。做冗余，参数表中的参数被删除后也不影响商品参数的正常显示 varchar(64)-->
			<if test="entity.value != null">#{entity.value},</if>                                        <!-- 参数值。做冗余，参数表中的参数被删除后也不影响商品参数的正常显示 varchar(1024)-->
			<if test="entity.valueImg != null">#{entity.valueImg},</if>                                  <!-- 参数值的图片。做冗余，参数表中的参数被删除后也不影响商品参数的正常显示 varchar(1024)-->
			<if test="entity.bak1 != null">#{entity.bak1},</if>                                          <!-- 备用字段1 varchar(64)-->
			<if test="entity.bak2 != null">#{entity.bak2},</if>                                          <!-- 备用字段2 varchar(64)-->
			<if test="entity.bak3 != null">#{entity.bak3},</if>                                          <!-- 备用字段3 varchar(64)-->
			<if test="entity.bak4 != null">#{entity.bak4},</if>                                          <!-- 备用字段4 varchar(64)-->
			<if test="entity.bak5 != null">#{entity.bak5},</if>                                          <!-- 备用字段5 varchar(64)-->
		</trim>
	</insert>

	<!-- 根据主键更新记录-->
	<update id="updateById">
		UPDATE product_param_mapping 
		<set>
			p_id = #{entity.pId},                                           <!-- 商品id bigint(20)-->
			sort = #{entity.sort},                                          <!-- 排序 int(11)-->
			type = #{entity.type},                                          <!-- 1核心参数、2辅助参数、3自定义参数。核心参数做为筛选条件 char(1)-->
			format = #{entity.format},                                      <!-- 1图片、2文字、3文字+图片（颜色要配图片） char(1)-->
			param_id = #{entity.paramId},                                   <!-- 参数ID bigint(20)-->
			name = #{entity.name},                                          <!-- 参数名。做冗余，参数表中的参数被删除后也不影响商品参数的正常显示 varchar(64)-->
			value = #{entity.value},                                        <!-- 参数值。做冗余，参数表中的参数被删除后也不影响商品参数的正常显示 varchar(1024)-->
			value_img = #{entity.valueImg},                                 <!-- 参数值的图片。做冗余，参数表中的参数被删除后也不影响商品参数的正常显示 varchar(1024)-->
			bak1 = #{entity.bak1},                                          <!-- 备用字段1 varchar(64)-->
			bak2 = #{entity.bak2},                                          <!-- 备用字段2 varchar(64)-->
			bak3 = #{entity.bak3},                                          <!-- 备用字段3 varchar(64)-->
			bak4 = #{entity.bak4},                                          <!-- 备用字段4 varchar(64)-->
			bak5 = #{entity.bak5},                                          <!-- 备用字段5 varchar(64)-->

		</set>
		WHERE id = #{entity.id}
	</update>

	<!-- 根据条件更新记录-->
	<update id="updateByWhere">
		UPDATE product_param_mapping a 
		<set>
			p_id = #{entity.pId},                                           <!-- 商品id bigint(20)-->
			sort = #{entity.sort},                                          <!-- 排序 int(11)-->
			type = #{entity.type},                                          <!-- 1核心参数、2辅助参数、3自定义参数。核心参数做为筛选条件 char(1)-->
			format = #{entity.format},                                      <!-- 1图片、2文字、3文字+图片（颜色要配图片） char(1)-->
			param_id = #{entity.paramId},                                   <!-- 参数ID bigint(20)-->
			name = #{entity.name},                                          <!-- 参数名。做冗余，参数表中的参数被删除后也不影响商品参数的正常显示 varchar(64)-->
			value = #{entity.value},                                        <!-- 参数值。做冗余，参数表中的参数被删除后也不影响商品参数的正常显示 varchar(1024)-->
			value_img = #{entity.valueImg},                                 <!-- 参数值的图片。做冗余，参数表中的参数被删除后也不影响商品参数的正常显示 varchar(1024)-->
			bak1 = #{entity.bak1},                                          <!-- 备用字段1 varchar(64)-->
			bak2 = #{entity.bak2},                                          <!-- 备用字段2 varchar(64)-->
			bak3 = #{entity.bak3},                                          <!-- 备用字段3 varchar(64)-->
			bak4 = #{entity.bak4},                                          <!-- 备用字段4 varchar(64)-->
			bak5 = #{entity.bak5},                                          <!-- 备用字段5 varchar(64)-->

		</set>
		where  <!-- 防止无where条件时，删除全表、更新全表 -->
		<trim prefixOverrides="AND |OR ">
			<if test="w!=null">
			<include refid="Where_Clause" />
			${w.outputSqlWhere}
			</if>
		</trim>
	</update>

	<!-- 根据主键更新记录,只把非空的值更到对应的字段-->
	<update id="updateByIdSelective">
		UPDATE product_param_mapping
		<set>
			<if test="entity.pId != null">p_id = #{entity.pId},</if>                                                            <!-- 商品id bigint(20)-->
			<if test="entity.sort != null">sort = #{entity.sort},</if>                                                          <!-- 排序 int(11)-->
			<if test="entity.type != null">type = #{entity.type},</if>                                                          <!-- 1核心参数、2辅助参数、3自定义参数。核心参数做为筛选条件 char(1)-->
			<if test="entity.format != null">format = #{entity.format},</if>                                                    <!-- 1图片、2文字、3文字+图片（颜色要配图片） char(1)-->
			<if test="entity.paramId != null">param_id = #{entity.paramId},</if>                                                <!-- 参数ID bigint(20)-->
			<if test="entity.name != null">name = #{entity.name},</if>                                                          <!-- 参数名。做冗余，参数表中的参数被删除后也不影响商品参数的正常显示 varchar(64)-->
			<if test="entity.value != null">value = #{entity.value},</if>                                                       <!-- 参数值。做冗余，参数表中的参数被删除后也不影响商品参数的正常显示 varchar(1024)-->
			<if test="entity.valueImg != null">value_img = #{entity.valueImg},</if>                                             <!-- 参数值的图片。做冗余，参数表中的参数被删除后也不影响商品参数的正常显示 varchar(1024)-->
			<if test="entity.bak1 != null">bak1 = #{entity.bak1},</if>                                                          <!-- 备用字段1 varchar(64)-->
			<if test="entity.bak2 != null">bak2 = #{entity.bak2},</if>                                                          <!-- 备用字段2 varchar(64)-->
			<if test="entity.bak3 != null">bak3 = #{entity.bak3},</if>                                                          <!-- 备用字段3 varchar(64)-->
			<if test="entity.bak4 != null">bak4 = #{entity.bak4},</if>                                                          <!-- 备用字段4 varchar(64)-->
			<if test="entity.bak5 != null">bak5 = #{entity.bak5},</if>                                                          <!-- 备用字段5 varchar(64)-->
		</set>
		WHERE id = #{entity.id}
	</update>

	<!-- 根据条件更新记录,只把非空的值更到对应的字段-->
	<update id="updateByWhereSelective">
		UPDATE product_param_mapping a
		<set>
			<if test="entity.pId != null">p_id = #{entity.pId},</if>                                                            <!-- 商品id bigint(20)-->
			<if test="entity.sort != null">sort = #{entity.sort},</if>                                                          <!-- 排序 int(11)-->
			<if test="entity.type != null">type = #{entity.type},</if>                                                          <!-- 1核心参数、2辅助参数、3自定义参数。核心参数做为筛选条件 char(1)-->
			<if test="entity.format != null">format = #{entity.format},</if>                                                    <!-- 1图片、2文字、3文字+图片（颜色要配图片） char(1)-->
			<if test="entity.paramId != null">param_id = #{entity.paramId},</if>                                                <!-- 参数ID bigint(20)-->
			<if test="entity.name != null">name = #{entity.name},</if>                                                          <!-- 参数名。做冗余，参数表中的参数被删除后也不影响商品参数的正常显示 varchar(64)-->
			<if test="entity.value != null">value = #{entity.value},</if>                                                       <!-- 参数值。做冗余，参数表中的参数被删除后也不影响商品参数的正常显示 varchar(1024)-->
			<if test="entity.valueImg != null">value_img = #{entity.valueImg},</if>                                             <!-- 参数值的图片。做冗余，参数表中的参数被删除后也不影响商品参数的正常显示 varchar(1024)-->
			<if test="entity.bak1 != null">bak1 = #{entity.bak1},</if>                                                          <!-- 备用字段1 varchar(64)-->
			<if test="entity.bak2 != null">bak2 = #{entity.bak2},</if>                                                          <!-- 备用字段2 varchar(64)-->
			<if test="entity.bak3 != null">bak3 = #{entity.bak3},</if>                                                          <!-- 备用字段3 varchar(64)-->
			<if test="entity.bak4 != null">bak4 = #{entity.bak4},</if>                                                          <!-- 备用字段4 varchar(64)-->
			<if test="entity.bak5 != null">bak5 = #{entity.bak5},</if>                                                          <!-- 备用字段5 varchar(64)-->
		</set>
		where  <!-- 防止无where条件时，删除全表、更新全表 -->
		<trim prefixOverrides="AND |OR ">
			<if test="w!=null">
			<include refid="Where_Clause" />
			${w.outputSqlWhere}
			</if>
		</trim>
	</update>

	<!-- 根据主键删除记录 -->
	<update id="deleteById">
		DELETE FROM product_param_mapping
		WHERE id = #{id}
	</update>

	<!-- 根据多个id删除记录 -->
	<update id="deleteByIdIn">
		DELETE FROM product_param_mapping
		<where>
			<choose>
				<when test="list != null and list.size >0">
					id in
					<foreach close=")" collection="list" item="item" open="(" separator=",">
						#{item}
					</foreach>
				</when>
				<otherwise> 1=2 </otherwise>
			</choose>
		</where>
	</update>
	
	<!-- 根据条件删除记录 -->
	<update id="deleteByWhere">
		DELETE <if test="w!=null and w.mysql">a </if>FROM product_param_mapping a
		where  <!-- 防止无where条件时，删除全表、更新全表 -->
		<trim prefixOverrides="AND |OR ">
			<if test="w!=null">
			<include refid="Where_Clause" />
			${w.outputSqlWhere}
			</if>
		</trim>
	</update>

	<!-- 根据条件查询记录总数 -->
	<select id="countByWhere" resultType="java.lang.Integer">
		SELECT <if test="w!=null and w.distinct">DISTINCT</if> COUNT(*) FROM product_param_mapping a
		<where>
			<if test="w!=null">
			<include refid="Where_Clause" />
			${w.outputSqlWhere}
			</if>
		</where>
	</select>

</mapper>