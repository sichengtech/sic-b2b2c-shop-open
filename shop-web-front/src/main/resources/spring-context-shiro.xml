<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context" xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/context  http://www.springframework.org/schema/context/spring-context-4.0.xsd"
	default-lazy-init="true">

	<description>Shiro Configuration</description>

	<!-- 安全认证过滤器 -->
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<property name="securityManager" ref="securityManager" /> 
		<property name="loginUrl" value="${ssoPath}/login/login.htm" />
		<property name="successUrl" value="${ssoPath}/login/loginSuccess.htm?login" />
		<property name="filters">
            <map>
                <entry key="cas" value-ref="casFilter"/>
                <entry key="authc" value-ref="ssoFormAuthenticationFilter"/>
                <entry key="logout" value-ref="logoutFilter" /><!-- 将LogoutFilter加入shiro过滤器 -->
            </map>
        </property>
        
        <!-- Shiro权限过滤过滤器定义 -->
		<property name="filterChainDefinitions">
			<value>
				/static/** = anon
				/userfiles/** = anon
				
				${ssoPath}/register/** = anon    
				${ssoPath}/forgetPassWord/** = anon    
				${ssoPath}/security/** = anon    
				${ssoPath}/login/getUserMain.htm = anon
				${ssoPath}/login/loginSimulation.htm = anon
				${sellerPath}/sys/area/** = anon
				${sellerPath}/sys/sysToken/** = anon
				${memberPath}/shop/pay/callback/** = anon
				${sellerPath}/product/productCar/selectProductCar.htm = anon
				${memberPath}/trade/tradeOrder/calculateFreight.htm = anon
				${ssoPath}/fy/poperties.htm=anon
				${memberPath}/fy/poperties.htm=anon
				${sellerPath}/fy/poperties.htm=anon
				
				${ssoPath}/login/login.htm = authc  
				${ssoPath}/logout.htm = logout
				  
				${ssoPath}/** = user
				${memberPath}/** = user
				${sellerPath}/** = user
				${frontPath}/method/getPrice.htm = user
				${frontPath}/method/collectionStore.htm = user
				${frontPath}/method/collectionProduct.htm = user
				${frontPath}/trade/** = user
			</value>
		</property>
	</bean>
	
	<!-- 表单验证（包含验证码）过滤类 -->
	<bean id="ssoFormAuthenticationFilter" class="com.sicheng.sso.shiro.SsoFormAuthenticationFilter"/>
	
	<!--LogoutFilter管理注销跳转到的url-->
	<bean id="logoutFilter" class="org.apache.shiro.web.filter.authc.LogoutFilter">
	     <property name="redirectUrl" value="${ssoPath}/login/login.htm" />
	</bean>
	
	<!-- CAS认证过滤器 -->  
	<bean id="casFilter" class="org.apache.shiro.cas.CasFilter">  
		<property name="failureUrl" value="${ssoPath}/login/login.htm"/>
	</bean>
	
	<!-- 定义Shiro安全管理配置 -->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<property name="realm" ref="ssoAuthorizingRealm" />
		<property name="sessionManager" ref="sessionManager" />
		<property name="cacheManager" ref="shiroCacheManager" />
		<!-- 记住我 -->
		<property name="rememberMeManager" ref="rememberMeManager"/>
	</bean>
	
	<!-- 系统安全认证实现类 -->
	<bean id="ssoAuthorizingRealm" class="com.sicheng.sso.shiro.SsoAuthorizingRealm">
		<!-- 启用缓存 -->
        <property name="cachingEnabled" value="true" />
        
        <!-- 认证信息缓存的name（缓存分区名称）
		比如EcCache缓存有多个分区的概念，Redis可使用Map代表一个缓存分区。 -->	
        <property name="authenticationCachingEnabled" value="false" /><!-- 需要为false,默认是false -->
        <property name="authenticationCacheName" value="authenticationCache_sso" />
        
        <!-- 授权信息缓存的name（缓存分区名称）
		比如EcCache缓存有多个分区的概念，Redis可使用Map代表一个缓存分区。 -->	
        <property name="authorizationCachingEnabled" value="true" />
        <property name="authorizationCacheName" value="authorizationCache_sso" />
	</bean>
		
	<!-- rememberMeManager管理器 -->
	<bean id="rememberMeManager" class="org.apache.shiro.web.mgt.CookieRememberMeManager">
		<property name="cookie" ref="rememberMeCookie" />
	</bean>
	<!-- 记住我cookie -->
	<bean id="rememberMeCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
		<constructor-arg value="sso.rememberMe" />
		<!-- 记住我cookie生效时间1天 -->
		<property name="maxAge" value="86400" />
	</bean>	
		
	<!-- 自定义会话管理配置 -->
	<bean id="sessionManager" class="com.sicheng.common.shiro.FdpSessionManager">
	
		<!-- 
		不在url后面追加类似内容：;JSESSIONID=fcce4048e3674b4
		zl 2017-08-22
		 -->
		<property name="sessionIdUrlRewritingEnabled" value="false" />
		<property name="sessionDAO" ref="sessionDAO"/>
		
		<!-- 会话超时时间，单位：毫秒  -->
		<property name="globalSessionTimeout" value="${session.sessionTimeout}"/>
		
		<!-- 是否启用定时清理失效session, 清理用户直接关闭浏览器造成的孤立session -->
		<property name="sessionValidationSchedulerEnabled" value="true"/>
		<!-- 定时清理失效会话, 每多久清理一次。session会话清理间隔时间， 单位：毫秒，15m=900000ms。 -->
		<property name="sessionValidationInterval" value="900000"/>
 		
		<property name="sessionIdCookie" ref="sessionIdCookie"/>
		<property name="sessionIdCookieEnabled" value="true"/>
	</bean>
	
	<!-- 指定本系统SESSIONID, 默认为: JSESSIONID 问题: 与SERVLET容器名冲突, 如JETTY, TOMCAT 等默认JSESSIONID,
		当跳出SHIRO SERVLET时如ERROR-PAGE容器会为JSESSIONID重新分配值导致登录会话丢失! -->
	<bean id="sessionIdCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
	    <constructor-arg name="name" value="sso.session.id"/>
	    <property name="path" value="/"/>
	</bean>
	
	<!--SessionDAO,负责存储session ,会存存储到cacheManager所代表的缓存中-->
	<bean id="sessionDAO" class="com.sicheng.common.shiro.FdpCacheSessionDAO">
		<property name="sessionIdGenerator" ref="sessionIdGenerator" />
		<!-- session缓存的缓存名字（缓存分区名称）
		比如EcCache缓存有多个分区的概念，Redis可使用Map代表一个缓存分区。 -->
		<property name="activeSessionsCacheName" value="activeSessionsCache_sso" />
		<property name="cacheManager" ref="shiroCacheManager" />
	</bean>
	
	<!-- session id生成器-->
	<bean id="sessionIdGenerator" class="com.sicheng.common.shiro.FdpSessionIdGenerator"></bean>	
	
	<!-- Shiro缓存管理器-->
	<!--
	<bean id="shiroCacheManager" class="为了方便管理，相关内容已迁移到data工程了"></bean>
	-->


	<!-- 保证实现了Shiro内部lifecycle函数的bean执行 -->
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>
	
	<!-- AOP式方法级权限检查  -->
	<bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor">
		<property name="proxyTargetClass" value="true" />
	</bean>
	<bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
    	<property name="securityManager" ref="securityManager"/>
	</bean>
	
</beans>