<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd"
	default-lazy-init="true">
    
    <description>wap前台 Spring MVC Configuration</description>

	<!-- 加载配置属性文件 -->
	<context:property-placeholder ignore-unresolvable="true" location="classpath:fdp.properties" />

	<!-- 使用Annotation自动注册Bean,只扫描@Controller -->
	<!-- 只扫描包com.sicheng.wap -->
	<!-- base-package 如果多个，用“,”分隔 -->
	<context:component-scan base-package="com.sicheng.wap.web.**" use-default-filters="false">
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
	</context:component-scan>
	
	<!-- 默认的注解映射的支持，org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping -->
	<mvc:annotation-driven content-negotiation-manager="contentNegotiationManager">
		<mvc:message-converters register-defaults="true">
			<!-- 将StringHttpMessageConverter的默认编码设为UTF-8 -->
			<bean class="org.springframework.http.converter.StringHttpMessageConverter">
		    	<constructor-arg value="UTF-8" />
			</bean>
			<!-- 将Jackson2HttpMessageConverter的默认格式化输出为false -->
			<bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
                <property name="supportedMediaTypes">
                	<list>
                	<value>application/json;charset=UTF-8</value>
                	</list>
                </property>
                <property name="prettyPrint" value="false"/>
                <property name="objectMapper">  
                    <bean class="com.sicheng.common.mapper.JsonMapper"></bean>  
                </property> 
            </bean>
             
            <!-- 使用XML格式输出数据 -->
            <bean class="org.springframework.http.converter.xml.MarshallingHttpMessageConverter">
		        <constructor-arg>
		        	<bean class="org.springframework.oxm.xstream.XStreamMarshaller">
				        <property name="streamDriver">
				            <bean class="com.thoughtworks.xstream.io.xml.StaxDriver"/>
				        </property>
				        <property name="annotatedClasses">
				            <list>
				            </list>
				        </property>
				    </bean>
		        </constructor-arg>
		        <property name="supportedMediaTypes" value="application/xml"></property>
			</bean>
		</mvc:message-converters>
	</mvc:annotation-driven>
	
    <!-- Spring MVC的“内容协商”策略，2017-07-20 禁用了2种“内容协商”策略 -->
    <!-- 由于咱前台拦截的*.htm，经过“内容协商”后，无法正确的响应ajax请求 -->
    <!-- //REST中根据URL后缀自动判定Content-Type及相应的View -->
	<bean id="contentNegotiationManager" class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean">
	    <property name="mediaTypes" >
	        <map> 
                <entry key="xml" value="application/xml"/> 
                <entry key="json" value="application/json"/> 
            </map>
	    </property>
        <property name="ignoreAcceptHeader" value="false"/><!-- 是否支持accept-header匹配，默认为fasle -->
        <property name="favorPathExtension" value="false"/><!-- 是否支持后缀匹配 -->
        <property name="favorParameter" value="true"/><!-- 是否支持参数匹配 --><!-- 用于开启 /userinfo/a.htm?format=json 的支持 --> 
	</bean>
	
	<!-- 定义jsp视图文件解析 -->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="${web.view.prefix}/wap/"/>
		<property name="suffix" value="${web.view.suffix}"/>
		<property name="order" value="200"/><!--有两个视图解析器，按order值排升序调用-->
	</bean>
	
	<!-- 对静态资源文件的访问， 将无法mapping到Controller的path交给default servlet handler处理 -->
	<mvc:default-servlet-handler />
	
	<!-- 静态资源映射 -->
    <mvc:resources mapping="/static/**" location="/static/" cache-period="31536000"/>
	
	<!-- 定义无Controller的path<->view直接映射 
	<mvc:view-controller path="/" view-name="redirect:${web.view.index}"/>
	临时注释，在开发阶段，首页使用index.jsp
	-->
	
	<!-- Beelt 父子资源加载器,优先从子加载器找模板，若找不到，再从父加载器找模板 -->
	<bean id="shopResourceLoader" class="com.sicheng.common.beetl.ShopResourceLoader">
		<property name="parentPath" value="/views/wap/default"/><!-- 系统自带的模板 -->
		<!-- <property name="childPath" value="/views/wap/other"/> --><!-- 其他的模板 -->
	</bean>
	<!-- beetl模板的基础配置，核心配置文件在classpath下的beetl.properties -->
	<bean id="beetlConfig" class="org.beetl.ext.spring.BeetlGroupUtilConfiguration" init-method="init">
		<property name="resourceLoader" ref="shopResourceLoader"/>
	</bean>
	<!-- 定义beetl模板视图文件解析 -->
	<bean name="beetlViewResolver" class="org.beetl.ext.spring.BeetlSpringViewResolver">
        <property name="suffix" value=".html"/>
        <property name="contentType" value="text/html;charset=UTF-8"/>
        <property name="order" value="1"/>
        <!-- 多GroupTemplate，需要指定使用的bean -->
        <property name="config" ref="beetlConfig"/>
	</bean>	
	<!--  Spring mvc项目可使用<mvc:cors/> 在配置支持跨域
	采用CorsFilter方案，未采用[mvc:cors/]方案
    <mvc:cors>
        <mvc:mapping path="/**"
            allowed-origins="*"
            allowed-methods="POST, GET, PUT, DELETE, PATCH"
            allowed-headers="AppToken,TerminalType"
            allow-credentials="true"
            max-age="6000" />
    </mvc:cors>
    -->
    
    <!--Spring MVC实现国际化 -->
    <!-- 第一步：配置消息源MessageSource用来加载对应的国际化属性文件：bean的ID名称只能是messageSource -->
    <!--配置ReloadableResourceBundleMessageSource：这种方式只能把资源文件放到任何位置，不需要重启就能加载文件，并且可以设置刷新时间 -->
    <bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
        <!-- 默认编码方式 -->
        <property name="defaultEncoding" value="UTF-8" />
        <!-- 资源文件的前缀:多了一个classpath，如果资源文件在一个文件夹下，还要加上文件夹路径，否则报错 -->
		<property name="basenames">
			<set>
				<value>classpath:msg</value>
				<value>classpath:msg/dict</value>
				<value>classpath:msg/upload</value>
			</set>
		</property>
        <!-- 刷新时间 -->
        <property name="cacheSeconds" value="3600" />
    </bean>

    <!-- 第二步：配置国际化解析器，有cookie和session两种方式 -->
	<!--配置session国际化解析器 -->
    <!-- <bean id="localeResolver" class="org.springframework.web.servlet.i18n.SessionLocaleResolver">
    	<property name="defaultLocale" value="zh_CN" />
    </bean> -->
    
    <bean id="localeResolver"
        class="org.springframework.web.servlet.i18n.CookieLocaleResolver">
        <!-- cookie变量的名称 -->
        <property name="cookieName" value="fylanguage" />
		<!-- cookie超时时间，一个月 -->
		<property name="cookieMaxAge" value="2592000" />
		<!-- 默认使用的语言 -->
		<property name="defaultLocale" value="${sys.defaultLocale}" />
    </bean>
	
    <!-- 配置国际化拦截器 -->
    <mvc:interceptors>
        <mvc:interceptor>
            <mvc:mapping path="/**" />
            <bean class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor">
                <property name="paramName" value="wap_language" />
            </bean>
        </mvc:interceptor>
    </mvc:interceptors>
</beans>